---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'My AWS CloudFormation. This example creates an auto scaling group behind a load balancer (reference from a different stack)
              The ELB puts access logs into an S3 bucket.'
Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack that contains the ELB
    Type: String
    Default: ELB-mzol
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: MyWebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.micro:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-04681a1dbd79675a5

Resources:
# AutoScaling config
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      LoadBalancerNames:
        - Fn::ImportValue: !Sub "${NetworkStackName}-MyELB"
          
# LaunchConfig config
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: "S3"
          role: !Ref 'RoleS3ReadAccess'
          buckets: 
            - "mzol-backet"
      AWS::CloudFormation::Init:
        install_app:
          packages:
            yum:
              httpd: []
              tomcat: []
              java-1.8.0-openjdk: []
          files:
            /usr/share/tomcat/webapps/app-1.0.0.war:
              source: "http://mzol-backet.s3.amazonaws.com/app-1.0.0.war"
              mode: 000644
              owner: tomcat
              group: tomcat
              authentication: S3AccessCreds
            /etc/httpd/conf.d/tomcatvh.conf:
              content: |
                <VirtualHost *:80>
                  ProxyPass / http://localhost:8080/app-1.0.0/app
                  ProxyPassReverse / http://localhost:8080/
                </VirtualHost>
              mode: 000644
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
              tomcat:
                enabled: "true"
                ensureRunning: "true"
        configSets:
          default: [ install_app ]
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'MySecurityGroup']
      IamInstanceProfile: !Ref 'WebServerInstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          aws s3 cp s3://mzol-backet/install.sh - | bash -l -s --
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}

# config InstanceProfile
  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'RoleS3ReadAccess']

# Config Role for s3
  RoleS3ReadAccess:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-S3Download-${AWS::Region}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 's3:GetObject'
            Resource: '*'

# Config for SecurityGroup
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Enable SSH access and HTTP access via port 80 and 22
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: !Ref 'SSHLocation' }
      Tags:
      - Key: Name
        Value: 'http-ssh'

